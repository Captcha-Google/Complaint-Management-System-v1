# Generated by Django 4.1.5 on 2023-01-08 07:32

import datetime
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
    ]

    operations = [
        migrations.CreateModel(
            name="Complainant",
            fields=[
                (
                    "complainant_id",
                    models.AutoField(primary_key=True, serialize=False, unique=True),
                ),
                ("complainant_name", models.CharField(max_length=255)),
                (
                    "complainant_barangay",
                    models.CharField(default="Dalipe", max_length=50),
                ),
                ("date_added", models.DateTimeField(auto_now=True)),
            ],
            options={
                "verbose_name_plural": "Complainant",
            },
        ),
        migrations.CreateModel(
            name="Entities",
            fields=[
                (
                    "entity_id",
                    models.AutoField(primary_key=True, serialize=False, unique=True),
                ),
                ("entity_name", models.CharField(max_length=255)),
                ("date_added", models.DateTimeField(auto_now=True)),
            ],
            options={
                "verbose_name_plural": "Entities",
            },
        ),
        migrations.CreateModel(
            name="Position",
            fields=[
                (
                    "position_id",
                    models.AutoField(primary_key=True, serialize=False, unique=True),
                ),
                ("position_type", models.CharField(max_length=255, unique=True)),
                ("date_added", models.DateTimeField(auto_now=True)),
            ],
            options={
                "verbose_name_plural": "Positions",
            },
        ),
        migrations.CreateModel(
            name="Purok",
            fields=[
                (
                    "purok_id",
                    models.AutoField(primary_key=True, serialize=False, unique=True),
                ),
                ("purok_name", models.CharField(max_length=255)),
                ("date_added", models.DateTimeField(auto_now=True)),
            ],
            options={
                "verbose_name_plural": "Purok",
            },
        ),
        migrations.CreateModel(
            name="Respondents",
            fields=[
                (
                    "respondent_id",
                    models.AutoField(primary_key=True, serialize=False, unique=True),
                ),
                ("respondent_name", models.CharField(max_length=255, unique=True)),
                (
                    "respondent_barangay",
                    models.CharField(default="Dalipe", max_length=50),
                ),
                ("date_added", models.DateTimeField(auto_now=True)),
                (
                    "respondent_purok",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="complaints_management_system.purok",
                    ),
                ),
            ],
            options={
                "verbose_name_plural": "Respondents",
            },
        ),
        migrations.CreateModel(
            name="Complaints",
            fields=[
                (
                    "complaint_id",
                    models.AutoField(primary_key=True, serialize=False, unique=True),
                ),
                ("case_no", models.IntegerField(default=0, unique=True)),
                (
                    "complaint_status",
                    models.CharField(
                        choices=[
                            ("Endorsed", "Endorsed"),
                            ("Settled", "Settled"),
                            ("Second Meeting", "Second Meeting"),
                            ("Third Meeting", "Third Meeting"),
                            ("First Meeting", "First Meeting"),
                        ],
                        max_length=50,
                    ),
                ),
                (
                    "complaint_type",
                    models.CharField(
                        choices=[
                            ("Minor Complaint", "Minor Complaint"),
                            ("Major Complaint", "Major Complaint"),
                        ],
                        default="Minor Complaint",
                        max_length=50,
                    ),
                ),
                ("complaint_desc", models.TextField(max_length=300)),
                ("settlement_desc", models.TextField(max_length=300)),
                (
                    "hearing_schedule",
                    models.DateTimeField(
                        default=datetime.datetime(2023, 1, 8, 15, 32, 55, 206170)
                    ),
                ),
                (
                    "date_complaint",
                    models.DateTimeField(
                        blank=True,
                        default=datetime.datetime(2023, 1, 8, 15, 32, 55, 206188),
                        null=True,
                    ),
                ),
                (
                    "complainant",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="complaints_management_system.complainant",
                    ),
                ),
                (
                    "respondent",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="complaints_management_system.respondents",
                    ),
                ),
            ],
            options={
                "verbose_name_plural": "Complaints",
            },
        ),
        migrations.AddField(
            model_name="complainant",
            name="complainant_purok",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                to="complaints_management_system.purok",
            ),
        ),
        migrations.CreateModel(
            name="User",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("password", models.CharField(max_length=128, verbose_name="password")),
                (
                    "last_login",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="last login"
                    ),
                ),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                (
                    "username",
                    models.CharField(
                        error_messages={
                            "unique": "A user with that username already exists."
                        },
                        help_text="Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.",
                        max_length=150,
                        unique=True,
                        validators=[
                            django.contrib.auth.validators.UnicodeUsernameValidator()
                        ],
                        verbose_name="username",
                    ),
                ),
                (
                    "first_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="first name"
                    ),
                ),
                (
                    "last_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="last name"
                    ),
                ),
                (
                    "email",
                    models.EmailField(
                        blank=True, max_length=254, verbose_name="email address"
                    ),
                ),
                (
                    "is_staff",
                    models.BooleanField(
                        default=False,
                        help_text="Designates whether the user can log into this admin site.",
                        verbose_name="staff status",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Designates whether this user should be treated as active. Unselect this instead of deleting accounts.",
                        verbose_name="active",
                    ),
                ),
                (
                    "date_joined",
                    models.DateTimeField(
                        default=django.utils.timezone.now, verbose_name="date joined"
                    ),
                ),
                (
                    "entity",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="complaints_management_system.entities",
                    ),
                ),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.group",
                        verbose_name="groups",
                    ),
                ),
                (
                    "position",
                    models.OneToOneField(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="complaints_management_system.position",
                    ),
                ),
                (
                    "user_permissions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Specific permissions for this user.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.permission",
                        verbose_name="user permissions",
                    ),
                ),
            ],
            options={
                "verbose_name": "user",
                "verbose_name_plural": "users",
                "abstract": False,
            },
            managers=[
                ("objects", django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
